#include <stdio.h>
#include <stdlib.h>

// Definição de uma estrutura de aresta
typedef struct {
    int origem, destino, peso;
} Aresta;

// Definição de uma estrutura de grafo
typedef struct {
    int V, E;
    Aresta* arestas;
} Grafo;

// Função para criar um grafo
Grafo* criarGrafo(int V, int E) {
    Grafo* grafo = (Grafo*)malloc(sizeof(Grafo));
    grafo->V = V;
    grafo->E = E;
    grafo->arestas = (Aresta*)malloc(E * sizeof(Aresta));
    return grafo;
}

// Função para encontrar o subconjunto de um elemento 'i'
int encontrar(int pai[], int i) {
    if (pai[i] == -1)
        return i;
    return encontrar(pai, pai[i]);
}

// Função para unir dois subconjuntos em um único conjunto
void unir(int pai[], int x, int y) {
    int xset = encontrar(pai, x);
    int yset = encontrar(pai, y);
    pai[xset] = yset;
}

// Função para ordenar as arestas de acordo com o peso
int comparar(const void* a, const void* b) {
    Aresta* a1 = (Aresta*)a;
    Aresta* b1 = (Aresta*)b;
    return a1->peso - b1->peso;
}

// Função principal do algoritmo de Kruskal
void KruskalAGM(Grafo* grafo) {
    int V = grafo->V;
    Aresta resultado[V];
    int e = 0; 
    int i = 0; 

    qsort(grafo->arestas, grafo->E, sizeof(grafo->arestas[0]), comparar);

    int *pai = (int*) malloc(V * sizeof(int));

    for (int v = 0; v < V; v++)
        pai[v] = -1;

    while (e < V - 1 && i < grafo->E) {
        Aresta proxima_aresta = grafo->arestas[i++];
        int x = encontrar(pai, proxima_aresta.origem);
        int y = encontrar(pai, proxima_aresta.destino);

        if (x != y) {
            resultado[e++] = proxima_aresta;
            unir(pai, x, y);
        }
    }

    free(pai);

    printf("Arestas na Árvore Geradora Mínima:\n");
    for (i = 0; i < e; ++i)
        printf("%d -- %d == %d\n", resultado[i].origem, resultado[i].destino, resultado[i].peso);
}

int main() {
    int V, E;
    printf("Digite o número de vértices: ");
    scanf("%d", &V);
    printf("Digite o número de arestas: ");
    scanf("%d", &E);

    Grafo* grafo = criarGrafo(V, E);

    // Pedindo ao usuário para inserir as arestas e pesos
    for (int i = 0; i < E; ++i) {
        printf("Digite a origem, destino e peso da aresta %d: ", i + 1);
        scanf("%d %d %d", &grafo->arestas[i].origem, &grafo->arestas[i].destino, &grafo->arestas[i].peso);
    }

    KruskalAGM(grafo);

    return 0;
}
